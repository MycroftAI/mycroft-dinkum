import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -noinstantiate -notrelocatable -nonrelocatable Mycroft 1.0 /usr/lib/qt/qml/Mycroft/libmycroftplugin.so'

Module {
    dependencies: [
        "QtGraphicalEffects 1.12",
        "QtMultimedia 5.11",
        "QtQml 2.14",
        "QtQml.Models 2.2",
        "QtQuick 2.9",
        "QtQuick.Controls 2.7",
        "QtQuick.Controls.Fusion 2.14",
        "QtQuick.Controls.Fusion.impl 2.14",
        "QtQuick.Controls.Imagine 2.14",
        "QtQuick.Controls.Imagine.impl 2.14",
        "QtQuick.Controls.Material 2.14",
        "QtQuick.Controls.Material.impl 2.14",
        "QtQuick.Controls.Styles 1.4",
        "QtQuick.Controls.Styles.Plasma 2.0",
        "QtQuick.Controls.Universal 2.14",
        "QtQuick.Controls.Universal.impl 2.12",
        "QtQuick.Controls.impl 2.14",
        "QtQuick.Extras 1.4",
        "QtQuick.Layouts 1.4",
        "QtQuick.Templates 2.7",
        "QtQuick.Window 2.2",
        "org.kde.kconfig 1.0",
        "org.kde.kirigami 2.9",
        "org.kde.kquickcontrolsaddons 2.0",
        "org.kde.plasma.components 3.0",
        "org.kde.plasma.core 2.0",
        "org.kde.plasma.extras 2.0"
    ]
    Component {
        name: "AbstractDelegate"
        defaultProperty: "contentData"
        prototype: "QQuickItem"
        exports: ["Mycroft/AbstractDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "sessionData"; type: "SessionDataMap"; isReadonly: true; isPointer: true }
        Property { name: "fillWidth"; type: "bool" }
        Property { name: "timeout"; type: "int" }
        Property { name: "skillBackgroundSource"; type: "string" }
        Property { name: "skillBackgroundColorOverlay"; type: "QColor" }
        Property { name: "contentItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "contentItemAutoHeight"; type: "bool" }
        Property { name: "contentItemAutoWidth"; type: "bool" }
        Property { name: "background"; type: "QQuickItem"; isPointer: true }
        Property { name: "leftPadding"; type: "int" }
        Property { name: "rightPadding"; type: "int" }
        Property { name: "topPadding"; type: "int" }
        Property { name: "bottomPadding"; type: "int" }
        Property { name: "contentWidth"; type: "int"; isReadonly: true }
        Property { name: "contentHeight"; type: "int"; isReadonly: true }
        Property { name: "contentData"; type: "QObject"; isList: true; isReadonly: true }
        Signal {
            name: "guiEvent"
            Parameter { name: "eventName"; type: "string" }
            Parameter { name: "data"; type: "QVariantMap" }
        }
        Method {
            name: "triggerGuiEvent"
            Parameter { name: "eventName"; type: "string" }
            Parameter { name: "parameters"; type: "QVariantMap" }
        }
    }
    Component {
        name: "AbstractSkillView"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["Mycroft/AbstractSkillView 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "status"; type: "MycroftController::Status"; isReadonly: true }
        Property { name: "activeSkills"; type: "ActiveSkillsModel"; isReadonly: true; isPointer: true }
        Signal { name: "activeSkillClosed" }
        Signal { name: "closed" }
    }
    Component {
        name: "ActiveSkillsModel"
        prototype: "QAbstractListModel"
        exports: ["Mycroft/ActiveSkillsModel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "activeIndex"; type: "int"; isReadonly: true }
        Property { name: "blackList"; type: "QStringList" }
        Property { name: "whiteList"; type: "QStringList" }
        Signal {
            name: "skillActivated"
            Parameter { name: "skillId"; type: "string" }
        }
        Signal {
            name: "blacklistedSkillActivated"
            Parameter { name: "skillId"; type: "string" }
        }
    }
    Component {
        name: "AudioRec"
        prototype: "QObject"
        exports: ["Mycroft/AudioRec 1.0"]
        exportMetaObjectRevisions: [0]
        Signal {
            name: "recordTStatus"
            Parameter { name: "recStatus"; type: "string" }
        }
        Method { name: "recordTStart" }
        Method { name: "recordTStop" }
        Method { name: "readStream" }
        Method { name: "returnStream" }
    }
    Component {
        name: "DelegatesModel"
        prototype: "QAbstractListModel"
        exports: ["Mycroft/DelegatesModel 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "currentIndex"; type: "int" }
    }
    Component {
        name: "FileReader"
        prototype: "QObject"
        exports: ["Mycroft/FileReader 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "read"
            type: "QByteArray"
            Parameter { name: "filename"; type: "string" }
        }
        Method {
            name: "file_exists_local"
            type: "bool"
            Parameter { name: "filename"; type: "string" }
        }
        Method {
            name: "checkForMeta"
            type: "QStringList"
            Parameter { name: "rootDir"; type: "string" }
            Parameter { name: "findFile"; type: "string" }
        }
    }
    Component {
        name: "GlobalSettings"
        prototype: "QObject"
        exports: ["Mycroft/GlobalSettings 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "webSocketAddress"; type: "string" }
        Property { name: "autoConnect"; type: "bool" }
        Property { name: "usesRemoteTTS"; type: "bool" }
        Property { name: "displayRemoteConfig"; type: "bool" }
        Signal { name: "webSocketChanged" }
    }
    Component {
        name: "MycroftController"
        prototype: "QObject"
        exports: ["Mycroft/MycroftController 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Status"
            values: {
                "Connecting": 0,
                "Open": 1,
                "Closing": 2,
                "Closed": 3,
                "Error": 4
            }
        }
        Property { name: "status"; type: "Status"; isReadonly: true }
        Property { name: "speaking"; type: "bool"; isReadonly: true }
        Property { name: "listening"; type: "bool"; isReadonly: true }
        Property { name: "currentSkill"; type: "string"; isReadonly: true }
        Property { name: "currentIntent"; type: "string"; isReadonly: true }
        Property { name: "serverReady"; type: "bool"; isReadonly: true }
        Signal { name: "socketStatusChanged" }
        Signal { name: "closed" }
        Signal { name: "isSpeakingChanged" }
        Signal { name: "isListeningChanged" }
        Signal { name: "stopped" }
        Signal { name: "notUnderstood" }
        Signal {
            name: "intentRecevied"
            Parameter { name: "type"; type: "string" }
            Parameter { name: "data"; type: "QVariantMap" }
        }
        Signal {
            name: "fallbackTextRecieved"
            Parameter { name: "skill"; type: "string" }
            Parameter { name: "data"; type: "QVariantMap" }
        }
        Signal {
            name: "utteranceManagedBySkill"
            Parameter { name: "skill"; type: "string" }
        }
        Method { name: "start" }
        Method { name: "disconnectSocket" }
        Method { name: "reconnect" }
        Method {
            name: "sendRequest"
            Parameter { name: "type"; type: "string" }
            Parameter { name: "data"; type: "QVariantMap" }
        }
        Method {
            name: "sendBinary"
            Parameter { name: "type"; type: "string" }
            Parameter { name: "data"; type: "QJsonObject" }
        }
        Method {
            name: "sendText"
            Parameter { name: "message"; type: "string" }
        }
    }
    Component {
        name: "QAbstractItemModel"
        prototype: "QObject"
        Enum {
            name: "LayoutChangeHint"
            values: {
                "NoLayoutChangeHint": 0,
                "VerticalSortHint": 1,
                "HorizontalSortHint": 2
            }
        }
        Enum {
            name: "CheckIndexOption"
            values: {
                "NoOption": 0,
                "IndexIsValid": 1,
                "DoNotUseParent": 2,
                "ParentIsInvalid": 4
            }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
        Signal {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutChanged" }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutAboutToBeChanged" }
        Signal {
            name: "rowsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "modelAboutToBeReset" }
        Signal { name: "modelReset" }
        Signal {
            name: "rowsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "rowsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Signal {
            name: "columnsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "column"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "parent"
            type: "QModelIndex"
            Parameter { name: "child"; type: "QModelIndex" }
        }
        Method {
            name: "sibling"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "idx"; type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "columnCount"; type: "int" }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "hasChildren"; type: "bool" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Method {
            name: "fetchMore"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "canFetchMore"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "flags"
            type: "Qt::ItemFlags"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component { name: "QAbstractListModel"; prototype: "QAbstractItemModel" }
    Component {
        name: "QAbstractVideoFilter"
        prototype: "QObject"
        Property { name: "active"; type: "bool" }
    }
    Component {
        name: "QDeclarativeMediaMetaData"
        prototype: "QObject"
        Property { name: "title"; type: "QVariant" }
        Property { name: "subTitle"; type: "QVariant" }
        Property { name: "author"; type: "QVariant" }
        Property { name: "comment"; type: "QVariant" }
        Property { name: "description"; type: "QVariant" }
        Property { name: "category"; type: "QVariant" }
        Property { name: "genre"; type: "QVariant" }
        Property { name: "year"; type: "QVariant" }
        Property { name: "date"; type: "QVariant" }
        Property { name: "userRating"; type: "QVariant" }
        Property { name: "keywords"; type: "QVariant" }
        Property { name: "language"; type: "QVariant" }
        Property { name: "publisher"; type: "QVariant" }
        Property { name: "copyright"; type: "QVariant" }
        Property { name: "parentalRating"; type: "QVariant" }
        Property { name: "ratingOrganization"; type: "QVariant" }
        Property { name: "size"; type: "QVariant" }
        Property { name: "mediaType"; type: "QVariant" }
        Property { name: "duration"; type: "QVariant" }
        Property { name: "audioBitRate"; type: "QVariant" }
        Property { name: "audioCodec"; type: "QVariant" }
        Property { name: "averageLevel"; type: "QVariant" }
        Property { name: "channelCount"; type: "QVariant" }
        Property { name: "peakValue"; type: "QVariant" }
        Property { name: "sampleRate"; type: "QVariant" }
        Property { name: "albumTitle"; type: "QVariant" }
        Property { name: "albumArtist"; type: "QVariant" }
        Property { name: "contributingArtist"; type: "QVariant" }
        Property { name: "composer"; type: "QVariant" }
        Property { name: "conductor"; type: "QVariant" }
        Property { name: "lyrics"; type: "QVariant" }
        Property { name: "mood"; type: "QVariant" }
        Property { name: "trackNumber"; type: "QVariant" }
        Property { name: "trackCount"; type: "QVariant" }
        Property { name: "coverArtUrlSmall"; type: "QVariant" }
        Property { name: "coverArtUrlLarge"; type: "QVariant" }
        Property { name: "resolution"; type: "QVariant" }
        Property { name: "pixelAspectRatio"; type: "QVariant" }
        Property { name: "videoFrameRate"; type: "QVariant" }
        Property { name: "videoBitRate"; type: "QVariant" }
        Property { name: "videoCodec"; type: "QVariant" }
        Property { name: "posterUrl"; type: "QVariant" }
        Property { name: "chapterNumber"; type: "QVariant" }
        Property { name: "director"; type: "QVariant" }
        Property { name: "leadPerformer"; type: "QVariant" }
        Property { name: "writer"; type: "QVariant" }
        Property { name: "cameraManufacturer"; type: "QVariant" }
        Property { name: "cameraModel"; type: "QVariant" }
        Property { name: "event"; type: "QVariant" }
        Property { name: "subject"; type: "QVariant" }
        Property { name: "orientation"; type: "QVariant" }
        Property { name: "exposureTime"; type: "QVariant" }
        Property { name: "fNumber"; type: "QVariant" }
        Property { name: "exposureProgram"; type: "QVariant" }
        Property { name: "isoSpeedRatings"; type: "QVariant" }
        Property { name: "exposureBiasValue"; type: "QVariant" }
        Property { name: "dateTimeOriginal"; type: "QVariant" }
        Property { name: "dateTimeDigitized"; type: "QVariant" }
        Property { name: "subjectDistance"; type: "QVariant" }
        Property { name: "meteringMode"; type: "QVariant" }
        Property { name: "lightSource"; type: "QVariant" }
        Property { name: "flash"; type: "QVariant" }
        Property { name: "focalLength"; type: "QVariant" }
        Property { name: "exposureMode"; type: "QVariant" }
        Property { name: "whiteBalance"; type: "QVariant" }
        Property { name: "digitalZoomRatio"; type: "QVariant" }
        Property { name: "focalLengthIn35mmFilm"; type: "QVariant" }
        Property { name: "sceneCaptureType"; type: "QVariant" }
        Property { name: "gainControl"; type: "QVariant" }
        Property { name: "contrast"; type: "QVariant" }
        Property { name: "saturation"; type: "QVariant" }
        Property { name: "sharpness"; type: "QVariant" }
        Property { name: "deviceSettingDescription"; type: "QVariant" }
        Property { name: "gpsLatitude"; type: "QVariant" }
        Property { name: "gpsLongitude"; type: "QVariant" }
        Property { name: "gpsAltitude"; type: "QVariant" }
        Property { name: "gpsTimeStamp"; type: "QVariant" }
        Property { name: "gpsSatellites"; type: "QVariant" }
        Property { name: "gpsStatus"; type: "QVariant" }
        Property { name: "gpsDOP"; type: "QVariant" }
        Property { name: "gpsSpeed"; type: "QVariant" }
        Property { name: "gpsTrack"; type: "QVariant" }
        Property { name: "gpsTrackRef"; type: "QVariant" }
        Property { name: "gpsImgDirection"; type: "QVariant" }
        Property { name: "gpsImgDirectionRef"; type: "QVariant" }
        Property { name: "gpsMapDatum"; type: "QVariant" }
        Property { name: "gpsProcessingMethod"; type: "QVariant" }
        Property { name: "gpsAreaInformation"; type: "QVariant" }
        Signal { name: "metaDataChanged" }
    }
    Component {
        name: "QQmlPropertyMap"
        prototype: "QObject"
        Signal {
            name: "valueChanged"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "keys"; type: "QStringList" }
    }
    Component {
        name: "SessionDataMap"
        prototype: "QQmlPropertyMap"
        exports: ["Mycroft/SessionDataMap 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Signal {
            name: "dataCleared"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        prototype: "QQuickItem"
        name: "Mycroft/AudioPlayer 1.0"
        exports: ["Mycroft/AudioPlayer 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "status"; type: "string" }
        Property { name: "switchWidth"; type: "int" }
        Property { name: "progressBar"; type: "bool" }
        Property { name: "thumbnailVisible"; type: "bool" }
        Property { name: "titleVisible"; type: "bool" }
        Property { name: "nextAction"; type: "QVariant" }
        Property { name: "previousAction"; type: "QVariant" }
        Property { name: "horizontal"; type: "bool"; isReadonly: true }
        Property { name: "source"; type: "QUrl" }
        Property { name: "thumbnail"; type: "QUrl" }
        Property { name: "title"; type: "string" }
        Property { name: "currentState"; type: "int"; isReadonly: true }
    }
    Component {
        prototype: "QQuickLabel"
        name: "Mycroft/AutoFitLabel 1.0"
        exports: ["Mycroft/AutoFitLabel 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "AbstractDelegate"
        name: "Mycroft/Delegate 1.0"
        exports: ["Mycroft/Delegate 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
        Property { name: "controlBar"; type: "QQmlComponent"; isPointer: true }
        Property { name: "controlBarItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "wideMode"; type: "bool"; isReadonly: true }
        Signal { name: "backRequested" }
    }
    Component {
        prototype: "QQuickFlickable"
        name: "Mycroft/PaginatedText 1.0"
        exports: ["Mycroft/PaginatedText 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "flickableData"
        Property { name: "columns"; type: "int"; isReadonly: true }
        Property { name: "currentIndex"; type: "int" }
        Property { name: "leftPadding"; type: "int" }
        Property { name: "topPadding"; type: "int" }
        Property { name: "rightPadding"; type: "int" }
        Property { name: "bottomPadding"; type: "int" }
        Property { name: "text"; type: "string" }
        Property { name: "font"; type: "QFont" }
        Property { name: "horizontalAlignment"; type: "int" }
    }
    Component {
        prototype: "AbstractDelegate"
        name: "Mycroft/ProportionalDelegate 1.0"
        exports: ["Mycroft/ProportionalDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
        Property { name: "unitDensity"; type: "int" }
        Property { name: "proportionalGridUnit"; type: "double" }
        Property { name: "spacing"; type: "double" }
        Property { name: "controlBar"; type: "QQmlComponent"; isPointer: true }
        Property { name: "controlBarItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "wideMode"; type: "bool"; isReadonly: true }
        Signal { name: "backRequested" }
    }
    Component {
        prototype: "AbstractDelegate"
        name: "Mycroft/ScrollableDelegate 1.0"
        exports: ["Mycroft/ScrollableDelegate 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "userInteracting"; type: "bool"; isReadonly: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "controlBar"; type: "QQmlComponent"; isPointer: true }
        Property { name: "controlBarItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "wideMode"; type: "bool"; isReadonly: true }
        Signal { name: "backRequested" }
    }
    Component {
        prototype: "AbstractSkillView"
        name: "Mycroft/SkillView 1.0"
        exports: ["Mycroft/SkillView 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "currentItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "switchWidth"; type: "int" }
        Property { name: "leftPadding"; type: "int" }
        Property { name: "topPadding"; type: "int" }
        Property { name: "rightPadding"; type: "int" }
        Property { name: "bottomPadding"; type: "int" }
        Property { name: "open"; type: "bool" }
        Property { name: "backgroundVisible"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "Mycroft/SlideShow 1.0"
        exports: ["Mycroft/SlideShow 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "model"; type: "QVariant" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "interval"; type: "int" }
        Property { name: "running"; type: "bool" }
        Property { name: "loop"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "Mycroft/SlidingImage 1.0"
        exports: ["Mycroft/SlidingImage 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "running"; type: "bool" }
        Property { name: "speed"; type: "double" }
        Property { name: "source"; type: "QUrl" }
    }
    Component {
        prototype: "QQuickItem"
        name: "Mycroft/StatusIndicator 1.0"
        exports: ["Mycroft/StatusIndicator 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "hasShadow"; type: "bool" }
    }
    Component {
        prototype: "QQuickItem"
        name: "Mycroft/VideoPlayer 1.0"
        exports: ["Mycroft/VideoPlayer 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "status"; type: "string" }
        Property { name: "progressBar"; type: "bool" }
        Property { name: "hasNextAction"; type: "bool" }
        Property { name: "hasPreviousAction"; type: "bool" }
        Property { name: "controlBarOpened"; type: "bool" }
        Property { name: "nextAction"; type: "QVariant" }
        Property { name: "previousAction"; type: "QVariant" }
        Property { name: "source"; type: "QUrl" }
        Property { name: "currentState"; type: "int"; isReadonly: true }
        Method {
            name: "formatTime"
            type: "QVariant"
            Parameter { name: "timeInMs"; type: "QVariant" }
        }
    }
}
